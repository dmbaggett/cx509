#!/usr/bin/python
from distutils.core import setup, Extension
import os
import sys
from glob import glob
import subprocess 

__version__ = "1.0.0"
extra_flags = []

# Remote repo with suitable asn1c (and prebuilt X.509 parser)
ASN1C_REPO = "https://github.com/dmbaggett/asn1c.git"

# Make sure we have an appropriate asn1c distro
rfc5280 = os.path.join("asn1c", "examples", "rfc5280.txt")
if not os.path.exists('asn1c') or not os.path.exists(rfc5280):
    if os.path.exists('asn1c'):
        import time
        os.rename('asn1c', 'asn1c-backup-%s' % time.time())

    using_remote_repo = True
    try:
        remotes = subprocess.Popen(["git", "remote", "-v"], stdout=subprocess.PIPE).communicate()[0].strip()
        if remotes.find("arcode.com") >= 0:
            using_remote_repo = False
    except:
        pass

    if using_remote_repo:
        print "You don't seem to have a suitable ASN.1 compiler; fetching it..."
        process = subprocess.Popen(["git", "clone", ASN1C_REPO], shell=False)
        while True:
            process.poll()
            if process.returncode == 0:
                break
            if process.returncode is not None:
                print("git clone of %s failed" % ASN1C_REPO)
                exit(process.returncode)
    else:
        print("fatal: run get-deps to get asn1c")
        exit(1)

#
# Add prebuilt X.509 C sources to sources list; these are asn1c examples, but provide everything we
# need.
#
sources = glob(os.path.normpath("asn1c/examples/sample.source.PKIX1/*.c"))
sources.extend(glob(os.path.normpath("asn1c/examples/sample.source.PKCS1/*.c")))
extra_flags.extend([
    '-Iasn1c/examples/sample.source.PKIX1',
    '-Iasn1c/examples/sample.source.PKCS1',
    '-DPDU=Certificate'
])
sources.append('cx509.c')

sources.remove(os.path.normpath('asn1c/examples/sample.source.PKIX1/converter-sample.c'))

setup(
    name="cx509",
    version=__version__,
    author="Dave Baggett",
    author_email="dmb@arcode.com",
    url="http://www.arcode.com/",
    description="X.509 certificate parsing using parser generated by asn1c.",
    license="MIT",
    platforms=["Platform Independent"],
    ext_modules=[Extension(
            name='cx509',
            sources=sources,
            extra_compile_args=extra_flags,
            extra_link_args=extra_flags
    )],
)
